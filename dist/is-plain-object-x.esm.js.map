{"version":3,"sources":["../src/is-plain-object-x.js"],"names":[],"mappings":"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","file":"is-plain-object-x.esm.js","sourcesContent":["import toStringTag from 'to-string-tag-x';\nimport isPrimitive from 'is-primitive-x';\nimport isArguments from 'is-arguments';\nimport getPrototypeOf from 'get-prototype-of-x';\nimport isNil from 'is-nil-x';\nimport isNode from 'is-node-x';\nimport hasOwnProperty from 'has-own-property-x';\nimport isPrototypeOf from 'is-prototype-of-x';\nimport methodize from 'simple-methodize-x';\n\nconst fnToString = methodize(methodize.toString);\nconst objectTag = '[object Object]';\n\nconst testNode = typeof document !== 'undefined' && toStringTag(document) === objectTag;\nconst testArguments = (function getTestArgs() {\n  /* eslint-disable-next-line prefer-rest-params */\n  return toStringTag(arguments) === objectTag;\n})();\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nlet $isHostObject;\n\nif (typeof window !== 'undefined' && toStringTag(window) === objectTag) {\n  $isHostObject = function isHostObject(value) {\n    // Many host objects are `Object` objects that can coerce to strings\n    // despite having improperly defined `toString` methods.\n    if (isNil(value) === false && typeof value.toString === 'function') {\n      try {\n        return Boolean(String(value));\n      } catch (ignore) {\n        // empty\n      }\n    }\n\n    return false;\n  };\n}\n\nconst $isObjectObject = function isObjectObject(value) {\n  if (isPrimitive(value) || typeof value === 'function' || toStringTag(value) !== objectTag) {\n    return false;\n  }\n\n  if (testArguments && isArguments(value)) {\n    return false;\n  }\n\n  if (testNode && isNode(value)) {\n    return false;\n  }\n\n  return (typeof $isHostObject === 'function' && $isHostObject(value)) === false;\n};\n\nconst $funcToString = function funcToString(value) {\n  if (isPrimitive(value) === false) {\n    try {\n      return fnToString(value);\n    } catch (ignore) {\n      // empty\n    }\n  }\n\n  /* eslint-disable-next-line no-void */\n  return void 0;\n};\n\nconst obj = {};\nconst objectCtorString = $funcToString(obj.constructor);\nconst $isPlainObject = function isPlainObject(value) {\n  if ($isObjectObject(value) === false) {\n    return false;\n  }\n\n  const proto = getPrototypeOf(value);\n\n  if (proto === null) {\n    return true;\n  }\n\n  if ($isObjectObject(proto) === false) {\n    return false;\n  }\n\n  if (isPrototypeOf(proto, obj)) {\n    return true;\n  }\n\n  const Ctor = hasOwnProperty(proto, 'constructor') && proto.constructor;\n\n  return typeof Ctor === 'function' && Ctor instanceof Ctor && $funcToString(Ctor) === objectCtorString;\n};\n\n/**\n * This method tests if `value` is a plain object, that is, an object created by\n * the `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @param {*} value - The value to test.\n * @returns {boolean} True if a plain object, otherwise false.\n */\nexport default $isPlainObject;\n"]}